from flask import Blueprint, render_template, redirect, session, url_for
from app.forms.login_form import LoginForm
from app.services.db_service import list_people
from app.services.session_db import get_db
from util.custom_sql_class import SQLUtilities
from util.crypto_utils import encrypt_string
from app.lib.decorators import requires_login

auth_bp = Blueprint("auth", __name__)


@auth_bp.route("/login", methods=["GET", "POST"])
def login():
    form = LoginForm()
    error = None

    if form.validate_on_submit():
        username = form.username.data
        password = form.password.data

        # Try to connect using provided info
        try:
            db = SQLUtilities(
                server="aiddb",
                database="Columbia",
                username=username,
                password=password,
            )
            if db.connect():
                print("Redirecting!")
                session["db_username"] = username
                session["db_password"] = encrypt_string(password)
                session.permanent = True
                return redirect(url_for("auth.index"))
            else:
                error = "Login failed. Please check credentials."
        except Exception as e:
            error = f"Error: {str(e)}"

    return render_template("login.html", form=form, error=error)


@auth_bp.route("/logout", methods=["POST"])
def logout():
    session.pop("db_username", None)
    session.pop("db_password", None)
    session.clear()
    return redirect(url_for("auth.login"))


@auth_bp.route("/test")
@requires_login
def test():
    db = get_db()

    query = """--sql
        select top 10
            psn.personID,
            psn.studentNumber,
            idnt.lastName,
            idnt.firstName
        from
            Enrollment as enrl
            join Calendar as cal
            on cal.calendarID = enrl.calendarID
                and cal.endYear = 2026
                and cal.summerSchool = 0
            join Person as psn
            on enrl.personID = psn.personID
                and psn.stateID is null
            join [Identity] as idnt
            on psn.currentIdentityID = idnt.identityID
        where enrl.serviceType = 'P'
            and psn.studentNumber is not null;
    """

    rows, headers = db.query_with_columns(query, strip=True)

    for n in rows:
        print(n)

    return render_template("test.html", results=rows, headers=headers)


@auth_bp.route("/")
@requires_login
def index():
    db = get_db()

    query = """--sql
        select top 10
            psn.personID,
            psn.studentNumber,
            idnt.lastName,
            idnt.firstName
        from
            Enrollment as enrl
            join Calendar as cal
            on cal.calendarID = enrl.calendarID
                and cal.endYear = 2026
                and cal.summerSchool = 0
            join Person as psn
            on enrl.personID = psn.personID
                and psn.stateID is null
            join [Identity] as idnt
            on psn.currentIdentityID = idnt.identityID
        where enrl.serviceType = 'P'
            and psn.studentNumber is not null;
    """

    rows, headers = db.query_with_columns(query, strip=True)

    # for n in rows:
    #     print(n)

    return render_template("index.html")


@auth_bp.route("/service")
@requires_login
def using_service():
    result, headers = list_people()
    for n in result:
        print(n)

    return render_template("test.html", results=result, headers=headers)


@auth_bp.route("/auditor")
@requires_login
def auditor():
    items = [
        "Copies of documentation supporting membership and hours of attendance reported to DESE through Core Data",
        "Attendance Hours Summary (from DESE) for FY25",
        "Published school calendar (both planned and final)",
        "Data Collection: 10 School Calendar List (Core Data) for FY25",
        "Data Collection: 15 Home School/Free and Reduced Lunch (Core Data) for FY25",
        "FYE June MOSIS Certified Download along with warnings generated by MOSIS and explanation of how warnings were resolved",
        "September and January membership reports for FY25",
    ]
    return render_template("auditor_questions.html", items=enumerate(items))
